Step 1. Task Intro
SUCCESS CRITERIA
Clean understanding of program goals


DESCRIPTION
Get familiar with the program. Get in touch with Misrosoft Teams if you have any questions.

!!!!You must download project three days before the interview

*******************************************************************************************

Step 2. Local Environment Setup
SUCCESS CRITERIA
System running Ubuntu Linux

MySQL installed

Git installed

Python istalled

Pip installed

virtualenv installed

setuptools installed

Python virtual environment configured


DESCRIPTION
Install Ubuntu Linux, MySQL, Git, Python, pip, virtualenv, setuptools. Configure Python virtual environment.


MATERIALS
Ubuntu Install Guide
https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0

MySQL Install Guide
https://help.ubuntu.com/lts/serverguide/mysql.html

Git Install Guide
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

Python 2 Install Guide
https://tecadmin.net/install-python-2-7-on-ubuntu-and-linuxmint/

Python 3 Install Guide
https://tecadmin.net/install-python-3-7-on-ubuntu-linuxmint/

Pip Install Guide
https://pip.pypa.io/en/stable/installing/

*******************************************************************************************

Step 3. Python Core, pip, virtualenv, setuptools
SUCCESS CRITERIA
Complete related Python courses


DESCRIPTION
Review your knowledge in Python core, pip, virtualenv, setuptools


MATERIALS
Python 3 Documentation
https://docs.python.org/3/

Pip Documentation
https://pip.pypa.io/en/stable/

Virtualenv Documentation
https://virtualenv.pypa.io/en/latest/#

Setuptools Documentation
https://setuptools.readthedocs.io/en/latest/index.html

*******************************************************************************************

Step 4. Create Repository on GitHub
SUCCESS CRITERIA
Project is publicly accissible on GitHub

Project features that are ready should be merged to original repo via pull requests


DESCRIPTION
Create GitHub account, fork from project template, checkout the fork locally.
Please include a README file with details about project goal in English.
Each feature/change requires commit/push to the fork followed by a pull request
to original repository


MATERIALS
GitHub Training & Guides (videos)
https://www.youtube.com/githubguides

GitHub Guides
https://guides.github.com/

Repo Forking
https://help.github.com/en/articles/fork-a-repo

Pull Requests
https://help.github.com/en/articles/about-pull-requests

*******************************************************************************************

Step 5. Create project specification
SUCCESS CRITERIA
Available online SRS. SRS may include project description with all use cases
and forms mockups

Create a pull request in GitHub.


DESCRIPTION
In the root of the repository create folder "documentation". Create there a
document Software Requirements Specification (SRS) with a description of
a software system to be developed with all applicable use cases.
The specification document must include forms mockups too.
SRS has to be created in Markdown format in English.


MATERIALS
Software Requirements Specification
https://en.wikipedia.org/wiki/Software_requirements_specification

Markdown
https://ru.wikipedia.org/wiki/Markdown

Mockups design tools
https://www.draw.io
https://wireframesketcher.com/


ATTACHMENTS Specification-RentalCars-Example.pdf

*******************************************************************************************

Step 6. Create HTML Prototype
SUCCESS CRITERIA
Static HTML prototype has been created


DESCRIPTION
Create a static mockup version of the application in HTML format with hardcoded data. It must include a minimum of 4 pages: departments.html, department.html, employees.html, and employee.html. All pages have to include hyperlinks to simulate application use cases. Inside "documentation" folder create folder "html_prototype" and push static prototype there.


MATERIALS
HTML
https://en.wikipedia.org/wiki/HTML
https://www.w3schools.com/html/

CSS
https://www.w3schools.com/css

*******************************************************************************************

Step 7. Choose Python Technologies
SUCCESS CRITERIA
Project type chosen

Python technologies for working with database chosen


DESCRIPTION
Choose the project type: Flask application

Choose Python technologies for working with database: SQLAlchemy


MATERIALS
Flask Documentation
http://flask.pocoo.org/

Flask-RESTfull Documentation
https://flask-restful.readthedocs.io/en/latest/

SQLAlchemy Documentation
https://www.sqlalchemy.org/

mysql-connector-python + SQL tutorial
https://dev.mysql.com/doc/connector-python/en/
https://www.w3schools.com/sql

*******************************************************************************************

Step 8. Create Project Structure
SUCCESS CRITERIA
Python project created

Create pull request(s) in GitHub.


DESCRIPTION
Create a Python project with the following required structure:
department-app (a project / app directory)

|__ migrations (this package must include migration files to manage database schema changes )

|__ models (this package must include modules with Python classes describing DB models (for ORM only))

|__ service (this package must include modules with functions / classes to work with DB (CRUD operations))

|__ sql (this folder must include *.sql files to work with DB (for non-ORM only))

|__ rest (this package must include modules with RESTful service implementation)

|__ templates (this folder must include web app html templates)

|__ static (this folder must include static files (js, css, images, etc,))

|__ tests (this package must include modules with unit tests)

|__ views (this package must include modules with Web controllers / views)

NOTES:
Project must include setup.py file - installation file telling Python how to install your project.

Any other project files / packages / sub-packages you might add in the future.


MATERIALS
Flask Project Layout
http://flask.pocoo.org/docs/1.0/tutorial/layout/

*******************************************************************************************

Step 9. Configure CI/CD, code quality
SUCCESS CRITERIA
 Project has been successfully built with travis-ci

Code quality metrics can be calculated

Code coverage is available on coveralls.io

Create pull request(s) in GitHub.

Travis-CI build was successfull after merging the pull request(s)


DESCRIPTION
Add the following to the project configuration:

Project build configuration should include "pylint" plugin
Use https://travis-ci.comfor building the project on github
Set up and add https://coveralls.io

MATERIALS
Building Python Project
https://docs.travis-ci.com/user/languages/python/

Embedding Status Images
https://docs.travis-ci.com/user/status-images/

Coveralls Documentation
https://docs.coveralls.io/

Pylint User Manual
http://pylint.pycqa.org/en/latest/

Travis-ci Notifications
https://docs.travis-ci.com/user/notifications/

Travis-ci Detailed Example
https://mdyzma.github.io/2017/05/20/flask-and-travis-ci/

An Introduction to Continuous Integration, Delivery, and Deployment
https://www.digitalocean.com/community/tutorials/an-introduction-to-continuous-integration-delivery-and-deployment

*******************************************************************************************

Step 10. Create and populate DB
SUCCESS CRITERIA
Database tables have been created

Test data has been inserted to database

Can connect to the database and execute queries

Create a pull request in GitHub.


DESCRIPTION
Create database with the following requirements:

Create two tables: "department" and "employee"
Populate database with the test data
Departments should store their names
Employees should store the following data: related department, employee name, date of birth, salary
NOTES:
Configure your application to connect to the required db.
If you chosen ORM technology to work with db (SQLAlchemy), you should create models and then generate migration scripts to manage database schema changes . You should use special Python modules or corresponding features of the chosen technology to generate migration scripts automatically or manually based on created modules.
If you chosen non-ORM technology to work with db (mysql-connector-python), you should use special Python modules to run migration scripts which you should create manually.

MATERIALS
Flask Migrate Documentation
https://flask-migrate.readthedocs.io/en/latest/

SQLAlchemy Migrate Documentation
https://sqlalchemy-migrate.readthedocs.io/en/latest/

Link-migration Documentation
https://pypi.org/project/link-migration/

Pymigrate Documentation
https://pymigrate.readthedocs.io/en/latest/

*******************************************************************************************

Step 11. Create Web Service
SUCCESS CRITERIA
Web service has been deployed and runs on local instance

Web service returns data stored in the database

Be able to make rest calls from command line and other client tools

Unit tests created

Debug information is displayed at the debugging level in the console and in a separate file

Classes and functions / methods have docstrings comments

Gunicorn configured properly

Create pull request(s) in GitHub.

Travis-CI build was successfull after merging the pull request(s)


DESCRIPTION
Create a web service (RESTful) for CRUD operations. One should be able to deploy the web service on Gunicorn using command line. All public functions / methods on all levels should include unit tests. Debug information should be displayed at the debugging level in the console and in a separate file. Classes and functions / methods must have docstrings comments.


MATERIALS
HTTP + HTTP Status Codes + REST
https://wiki2.org/en/Hypertext_Transfer_Protocol
https://wiki2.org/en/List_of_HTTP_status_codes
https://www.restapitutorial.com/lessons/whatisrest.html#

Curl User Manual
https://curl.haxx.se/docs/manual.html

Flask-RESTfull Documentation
https://flask-restful.readthedocs.io/en/latest/

Unit Testing Framework (Python 3.7)
https://docs.python.org/3/library/unittest.html

Logging HOWTO
https://docs.python.org/3/howto/logging.html

Docstrings in Python
https://www.datacamp.com/community/tutorials/docstrings-python

Gunicorn Documentation
http://docs.gunicorn.org/en/stable/

*******************************************************************************************

Step 12. Create Web Application
SUCCESS CRITERIA
Web application has been deployed and runs on local instance

Web application uses web service to fetch the data from database

Be able to explain the chain of calls, starting from a browser to db, going through web layers

Unit tests created

Debug information is displayed at the debugging level in the console and in a separate file

Classes and functions / methods have docstrings comments

Gunicorn configured properly

README contains a brief description of the project, instructions on how to build a project from the command line, how to start it, and at what addresses the Web service and the Web application will be available after launch

Create pull request(s) in GitHub.

Travis-CI build was successfull after merging the pull request(s)


DESCRIPTION
Create a simple web application for managing departments and employees. The web application should use aforementioned web service for storing data and reading from database. One should be able to deploy the web application on Gunicorn using command line. All public functions / methods on all levels should include unit tests. Debug information should be displayed at the debugging level in the console and in a separate file. Classes and functions / methods must have docstrings comments. Finalyze README file which should contain a brief description of the project, instructions on how to build a project from the command line, how to start it, and at what addresses the Web service and the Web application will be available after launch.

The web application should allow:

display a list of departments and the average salary (calculated automatically) for these departments
display a list of employees in the departments with an indication of the salary for each employee and a search field to search for employees born on a certain date or in the period between dates
change (add / edit / delete) the above data
NOTE:
This step may require updating existing or adding new REST endpoints to the aforementioned web service (if they were not taken into account in the previous step). For example, the implementation of employee search by date of birth or the addition of the possibility of calculating the average salary when getting a list of departments.


MATERIALS
Flask + Jinja2 Documentation
http://flask.pocoo.org/
http://jinja.pocoo.org/docs/2.10/

Example of Serving multiple applications with Nginx and Gunicorn
http://michal.karzynski.pl/blog/2013/10/29/serving-multiple-django-applications-with-nginx-gunicorn-supervisor/

Unit Testing Framework (Python 3.7)
https://docs.python.org/3/library/unittest.html

Logging HOWTO
https://docs.python.org/3/howto/logging.html

Docstrings in Python
https://www.datacamp.com/community/tutorials/docstrings-python

Gunicorn Documentation
http://docs.gunicorn.org/en/stable/

*******************************************************************************************


Step 13. Prepare to an Interview
SUCCESS CRITERIA
 Prepare to Technical Interview


DESCRIPTION
If you have completed the program and feel you're ready for the next step please contact your RD representative.
